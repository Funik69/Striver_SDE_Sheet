/*
struct Job 
{ 
    int id;	 // Job Id 
    int dead; // Deadline of job 
    int profit; // Profit if job is over before or on deadline 
};
*/

class Solution 
{
    public:
   static bool comp(Job a,Job b){
        return a.profit>b.profit;
    }
    vector<int> JobScheduling(Job arr[], int n) 
    { 
        sort(arr,arr+n,comp);
        int mxD=arr[0].dead;
        for(int i=1;i<n;i++) mxD=max(mxD,arr[i].dead);
        int slot[mxD+1];
        for(int i=0;i<=mxD;i++) slot[i]=-1;
        int cnt=0,sum=0;
        
        for(int i=0;i<n;i++){
            for(int j=arr[i].dead;j>0;j--){
                if(slot[j]==-1){
                    slot[j]=i;
                    cnt++;
                    sum+=arr[i].profit;
                    break;
                }
            }
        }
        return {cnt,sum};
    } 
};
