class Solution {
public:
int merge(int l,int r,int mid,vector<int> &nums){
    int cnt=0;
    int j=mid+1;
    for(int i=l;i<=mid;i++){
        while(j<=r && nums[i]>2LL * nums[j]){
            j++;
        }
        cnt+= j-(mid+1);
    }
    vector<int> temp;
    int low=l,high=mid+1;
    while(low<=mid && high<=r){
        if(nums[low]>=nums[high]){
            temp.push_back(nums[high++]);
        }
        else{
            temp.push_back(nums[low++]);
        }
    }
    while(low<=mid){
        temp.push_back(nums[low++]);
    }
    while(high<=r){
        temp.push_back(nums[high++]);
}
for(int i=l;i<=r;i++){
    nums[i]=temp[i-l];
}
return cnt;
}
int mergesort(int l,int r,vector<int> &nums){
    if(l>=r)return 0;
    int mid=(l+r)/2;
    int inv=mergesort(l,mid,nums);
     inv+=mergesort(mid+1,r,nums);
     inv+=merge(l,r,mid,nums);
     return inv;
}
    int reversePairs(vector<int>& nums) {
        return mergesort(0,nums.size()-1,nums);
    }
};
